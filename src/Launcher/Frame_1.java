/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Launcher;

import Master.Decouverte;
import Master.MasterPeer;
import Master.Matrix;
import Worker.WorkerPeer;
import java.awt.Desktop;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.NoSuchPaddingException;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import net.jxta.peergroup.PeerGroup;
import net.jxta.pipe.InputPipe;
import net.jxta.platform.NetworkManager;

/**
 *
 * @author aniss
 */
public class Frame_1 extends javax.swing.JFrame {
    
    public PeerGroup netPeerGroup;
    public Matrix a,b,reMatrix,reMatrix1;
    public Worker.Matrix reMatrix2,reMatrix3;
    public String chaine;
    public NetworkManager myNetworkManager;
    public LinkedList list = new LinkedList();
    public MasterPeer masterPeer;
    public Worker.WorkerPeer workerPeer;
    public String filePath = "C:\\Users\\aniss\\Documents\\NetBeansProjects\\Matrices.txt";
    public InputPipe myInputPipe;
    public Date date;
    private ArrayList al = new ArrayList();
    private String MatrixPath;
    private double random;
    private double lower = -1000;
    private double higher = 1000;
    private JComboBox Choix = new JComboBox();
    
    /**
     * Creates new form Frame
     */
    public Frame_1(MasterPeer masterPeer,PeerGroup netPeerGroup,NetworkManager myNetworkManager, InputPipe myInputPipe1,String MatrixPath1) {
        this.myInputPipe = myInputPipe1;
        this.netPeerGroup = netPeerGroup;
        this.masterPeer = masterPeer;
        this.myNetworkManager=myNetworkManager;
        this.MatrixPath = MatrixPath1;
          Choix.addItem("Addition");
             Choix.addItem("Soustraction");
              Choix.addItem("Division");
               Choix.addItem("Multiplication");
                Choix.addItem("Transpose");
                 Choix.addItem("Multiplication par nombre");
        initComponents();
    }
     public Frame_1(Worker.WorkerPeer workerPeer,PeerGroup netPeerGroup, Matrix a, Matrix b, String chaine,NetworkManager myNetworkManager, InputPipe myInputPipe1,String MatrixPath1) {
       
       
         this.myInputPipe = myInputPipe1;
         this.netPeerGroup = netPeerGroup;
        this.workerPeer = workerPeer;
        this.a=a;
        this.b=b;
        this.chaine = chaine;
        this.myNetworkManager=myNetworkManager;
        this.MatrixPath = MatrixPath1;
          Choix.addItem("Addition");
             Choix.addItem("Soustraction");
              Choix.addItem("Division");
               Choix.addItem("Multiplication");
                Choix.addItem("Transpose");
                 Choix.addItem("Multiplication par nombre");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jProgressBar1 = new javax.swing.JProgressBar();
        Rechercher = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        Show_matrix_a = new javax.swing.JButton();
        Show_matrix_b = new javax.swing.JButton();
        Show_matrix_result = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        Calculer = new javax.swing.JButton();
        Une_autre_tache = new javax.swing.JButton();
        Quitter = new javax.swing.JButton();
        setLocationRelativeTo(null);
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(this.netPeerGroup.getPeerName()+" : "+myNetworkManager.getMode().toString());

        jLabel1.setText("Recherche des peers connectés");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        Rechercher.setText("Rechercher");
        Rechercher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RechercherActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(35, 35, 35)))
                .addGap(52, 52, 52))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(96, 96, 96))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(129, 129, 129)
                .addComponent(Rechercher, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(112, 112, 112))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Rechercher))
        );

        Show_matrix_a.setText("Afficher la matrice a");
        Show_matrix_a.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Show_matrix_aActionPerformed(evt);
            }
        });

        Show_matrix_b.setText("Afficher la matrice b");
        Show_matrix_b.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Show_matrix_bActionPerformed(evt);
            }
        });

        Show_matrix_result.setText("Afficher le résultat");
        Show_matrix_result.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Show_matrix_resultActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Show_matrix_result, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Show_matrix_b, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Show_matrix_a, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(2, 2, 2)))
                .addGap(36, 36, 36))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(90, Short.MAX_VALUE)
                .addComponent(Show_matrix_a)
                .addGap(31, 31, 31)
                .addComponent(Show_matrix_b)
                .addGap(37, 37, 37)
                .addComponent(Show_matrix_result)
                .addGap(108, 108, 108))
        );

        Calculer.setText("Calculer");
        Calculer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    CalculerActionPerformed(evt);
                } catch (IOException ex) {
                    Logger.getLogger(Frame_1.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Frame_1.class.getName()).log(Level.SEVERE, null, ex);
                } catch (NoSuchAlgorithmException ex) {
                    Logger.getLogger(Frame_1.class.getName()).log(Level.SEVERE, null, ex);
                } catch (NoSuchPaddingException ex) {
                    Logger.getLogger(Frame_1.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        Une_autre_tache.setText("Une autre tache");
        Une_autre_tache.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    Une_autre_tacheActionPerformed(evt);
                } catch (IOException ex) {
                    Logger.getLogger(Frame_1.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        Quitter.setText("Quitter");
        Quitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuitterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(Calculer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(65, 65, 65))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(73, 73, 73)
                                .addComponent(Une_autre_tache)))
                        .addGap(63, 63, 63))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(180, 180, 180)
                        .addComponent(Quitter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(Calculer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Une_autre_tache)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Quitter)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(46, 46, 46))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void Show_matrix_aActionPerformed(java.awt.event.ActionEvent evt) {                                              
        Show show = new Show(a,"Matrice a");
        show.setVisible(true);
        JTextArea myJTextArea =show.GetJTextArea();
        
        if(a.getNbLines()>1 && a.getNbColumns()>1){
            
              for(int i = 0; i < a.getNbLines(); i++){
            for(int j = 0; j < a.getNbColumns(); j++){
                if(j==0){
                    myJTextArea.append("["+a.getTabMatrix()[i][j]+";");
                }else{
                    if(j==a.getNbColumns()-1){
                        myJTextArea.append(a.getTabMatrix()[i][j]+"]\n");
                    }else{
                        myJTextArea.append(a.getTabMatrix()[i][j]+";");
                    }
                }
            }
        }
            
        }else{
            if(a.getNbLines()==1 && a.getNbColumns()==1){
                myJTextArea.append("["+a.getTabMatrix()[0][0]+"]");
                
            }else{
                if(a.getNbLines()==1 && a.getNbColumns()>1){
                    for(int j=0; j<a.getNbColumns(); j++){
                        if(j==0){
                            myJTextArea.append("["+a.getTabMatrix()[0][j]+";");
                            
                        }else{
                            if(j==(a.getNbColumns()-1)){
                                myJTextArea.append(a.getTabMatrix()[0][j]+"]");
                                
                            }else{
                                myJTextArea.append(a.getTabMatrix()[0][j]+";");
                                
                            }
                        }
                    }
                }else{
                    if(a.getNbLines()>1 && a.getNbColumns()==1){
                          for(int i=0; i<a.getNbLines(); i++){
                              myJTextArea.append("["+a.getTabMatrix()[i][0]+"]\n");
                                
                    }
                        
                    }
                }
            }
        }
      
    }                                             

    private void Show_matrix_bActionPerformed(java.awt.event.ActionEvent evt) {                                              
        Show show = new Show(b,"Matrice b");
        
        
       show.setVisible(true);
        JTextArea myJTextArea =show.GetJTextArea();
        
        if(b.getNbLines()>1 && b.getNbColumns()>1){
            
              for(int i = 0; i < b.getNbLines(); i++){
            for(int j = 0; j < b.getNbColumns(); j++){
                if(j==0){
                    myJTextArea.append("["+b.getTabMatrix()[i][j]+";");
                }else{
                    if(j==b.getNbColumns()-1){
                        myJTextArea.append(b.getTabMatrix()[i][j]+"]\n");
                    }else{
                        myJTextArea.append(b.getTabMatrix()[i][j]+";");
                    }
                }
            }
        }
            
        }else{
            if(b.getNbLines()==1 && b.getNbColumns()==1){
                myJTextArea.append("["+b.getTabMatrix()[0][0]+"]");
                
            }else{
                if(b.getNbLines()==1 && b.getNbColumns()>1){
                    for(int j=0; j<b.getNbColumns(); j++){
                        if(j==0){
                            myJTextArea.append("["+b.getTabMatrix()[0][j]+";");
                            
                        }else{
                            if(j==(b.getNbColumns()-1)){
                                myJTextArea.append(b.getTabMatrix()[0][j]+"]");
                                
                            }else{
                                myJTextArea.append(b.getTabMatrix()[0][j]+";");
                                
                            }
                        }
                    }
                }else{
                    if(b.getNbLines()>1 && b.getNbColumns()==1){
                          for(int i=0; i<b.getNbLines(); i++){
                              myJTextArea.append("["+b.getTabMatrix()[i][0]+"]\n");
                                
                    }
                        
                    }
                }
            }
        }
      
    }                                             

    private void Show_matrix_resultActionPerformed(java.awt.event.ActionEvent evt) {
        if(masterPeer!=null){
            
             Show show = new Show(reMatrix,"Matrice résultanate");
        
        
        show.setVisible(true);
        JTextArea myJTextArea =show.GetJTextArea();
        
        if(reMatrix.getNbLines()>1 && reMatrix.getNbColumns()>1){
            
              for(int i = 0; i < reMatrix.getNbLines(); i++){
            for(int j = 0; j < reMatrix.getNbColumns(); j++){
                if(j==0){
                    myJTextArea.append("["+reMatrix.getTabMatrix()[i][j]+";");
                }else{
                    if(j==reMatrix.getNbColumns()-1){
                        myJTextArea.append(reMatrix.getTabMatrix()[i][j]+"]\n");
                    }else{
                        myJTextArea.append(reMatrix.getTabMatrix()[i][j]+";");
                    }
                }
            }
        }
            
        }else{
            if(reMatrix.getNbLines()==1 && reMatrix.getNbColumns()==1){
                myJTextArea.append("["+reMatrix.getTabMatrix()[0][0]+"]");
                
            }else{
                if(reMatrix.getNbLines()==1 && reMatrix.getNbColumns()>1){
                    for(int j=0; j<reMatrix.getNbColumns(); j++){
                        if(j==0){
                            myJTextArea.append("["+reMatrix.getTabMatrix()[0][j]+";");
                            
                        }else{
                            if(j==(reMatrix.getNbColumns()-1)){
                                myJTextArea.append(reMatrix.getTabMatrix()[0][j]+"]");
                                
                            }else{
                                myJTextArea.append(reMatrix.getTabMatrix()[0][j]+";");
                                
                            }
                        }
                    }
                }else{
                    if(reMatrix.getNbLines()>1 && reMatrix.getNbColumns()==1){
                          for(int i=0; i<reMatrix.getNbLines(); i++){
                              myJTextArea.append("["+reMatrix.getTabMatrix()[i][0]+"]\n");
                                
                    }
                        
                    }
                }
            }
        }
      
        
            
        }else{
            if(workerPeer!=null){
                 Show show = new Show(reMatrix2,"Matrice résultanate");
        
        
        show.setVisible(true);
        JTextArea myJTextArea =show.GetJTextArea();
        
        if(reMatrix2.getNbLines()>1 && reMatrix2.getNbColumns()>1){
            
              for(int i = 0; i < reMatrix2.getNbLines(); i++){
            for(int j = 0; j < reMatrix2.getNbColumns(); j++){
                if(j==0){
                    myJTextArea.append("["+reMatrix2.getTabMatrix()[i][j]+";");
                }else{
                    if(j==reMatrix2.getNbColumns()-1){
                        myJTextArea.append(reMatrix2.getTabMatrix()[i][j]+"]\n");
                    }else{
                        myJTextArea.append(reMatrix2.getTabMatrix()[i][j]+";");
                    }
                }
            }
        }
            
        }else{
            if(reMatrix2.getNbLines()==1 && reMatrix2.getNbColumns()==1){
                myJTextArea.append("["+reMatrix2.getTabMatrix()[0][0]+"]");
                
            }else{
                if(reMatrix2.getNbLines()==1 && reMatrix2.getNbColumns()>1){
                    for(int j=0; j<reMatrix2.getNbColumns(); j++){
                        if(j==0){
                            myJTextArea.append("["+reMatrix2.getTabMatrix()[0][j]+";");
                            
                        }else{
                            if(j==(reMatrix2.getNbColumns()-1)){
                                myJTextArea.append(reMatrix2.getTabMatrix()[0][j]+"]");
                                
                            }else{
                                myJTextArea.append(reMatrix2.getTabMatrix()[0][j]+";");
                                
                            }
                        }
                    }
                }else{
                    if(reMatrix2.getNbLines()>1 && reMatrix2.getNbColumns()==1){
                          for(int i=0; i<reMatrix2.getNbLines(); i++){
                              myJTextArea.append("["+reMatrix2.getTabMatrix()[i][0]+"]\n");
                                
                    }
                        
                    }
                }
            }
        }
      
        
            }
            
        }
        
       
    }
    public void setResult(Matrix x){
        this.reMatrix = x;
        
    }

    private void CalculerActionPerformed(java.awt.event.ActionEvent evt) throws IOException, InterruptedException, NoSuchAlgorithmException, NoSuchPaddingException {                                         
        System.out.println("listeeeeeeeeeeeeeeeeeeeeeeeee1"+list); 
        if(masterPeer!=null){
            
      String MatrixPath = masterPeer.getMatrixPath();
        
          String chString="";
        Scanner scanner=new Scanner(new File( MatrixPath));
 

        
while (scanner.hasNextLine()) {
    String line = scanner.nextLine();
 
    
    
    chString=chString+line;
    
    
   
	
}

       

        
        
        
        String[] cString=chString.split(";");
         
        
        chaine = cString[0];
        System.out.println("Votre operation est "+chaine+" :");
        
        if(cString[1].equals("Matrice a")){
             a=new Matrix(Integer.parseInt(cString[2]), Integer.parseInt(cString[3]));
            
            
            int k=4;
            while(k<4+(a.getNbColumns()*a.getNbLines())){
                for(int i=0; i<a.getNbLines();i++){
                    for(int j=0; j<a.getNbColumns();j++){
                        a.setTabMatrix(i, j, Double.parseDouble(cString[k]));
                        k++;
                       
                        
                    }
                }
                
            }
            System.out.println(cString[1]+" :");
          
            a.showMatrix();
            
        }
        int w=4+(Integer.parseInt(cString[2])*Integer.parseInt(cString[3]));
        
        if(cString[w].equals("Matrice b")){
            
            
            b=new Matrix(Integer.parseInt(cString[w+1]), Integer.parseInt(cString[w+2]));
            int h=w+3;
            while(h<cString.length){
                for(int i=0; i<b.getNbLines();i++){
                    for(int j=0; j<b.getNbColumns();j++){
                        b.setTabMatrix(i, j, Double.parseDouble(cString[h]));
                        h++;
                        
                    }
                }
            }
            
            System.out.println(cString[w]+" :");
            b.showMatrix();
            
        }
 
          scanner.close();
        
        
            MasterPeer mymasterPeer=new MasterPeer(list, a, b, netPeerGroup,chaine,myNetworkManager,myInputPipe,this);
            
        }else{
            if(workerPeer!=null){
                
          
        String MatrixPath = workerPeer.getMatrixPath();
       
          String chString="";
        Scanner scanner=new Scanner(new File(MatrixPath ));
 

        
while (scanner.hasNextLine()) {
    String line = scanner.nextLine();
 
    
    
    chString=chString+line;
    
    
   
	
}

       

        
        
        
        String[] cString=chString.split(";");
         
        
        chaine = cString[0];
        System.out.println("Votre operation est "+chaine+" :");
        
        if(cString[1].equals("Matrice a")){
             a=new Matrix(Integer.parseInt(cString[2]), Integer.parseInt(cString[3]));
            
            
            int k=4;
            while(k<4+(a.getNbColumns()*a.getNbLines())){
                for(int i=0; i<a.getNbLines();i++){
                    for(int j=0; j<a.getNbColumns();j++){
                        a.setTabMatrix(i, j, Double.parseDouble(cString[k]));
                        k++;
                       
                        
                    }
                }
                
            }
            System.out.println(cString[1]+" :");
          
            a.showMatrix();
            
        }
        int w=4+(Integer.parseInt(cString[2])*Integer.parseInt(cString[3]));
        
        if(cString[w].equals("Matrice b")){
            
            
            b=new Matrix(Integer.parseInt(cString[w+1]), Integer.parseInt(cString[w+2]));
            int h=w+3;
            while(h<cString.length){
                for(int i=0; i<b.getNbLines();i++){
                    for(int j=0; j<b.getNbColumns();j++){
                        b.setTabMatrix(i, j, Double.parseDouble(cString[h]));
                        h++;
                        
                    }
                }
            }
            
            System.out.println(cString[w]+" :");
            b.showMatrix();
            
        }
 
          scanner.close();
        
         
                
                Worker.WorkerPeer workerPeer = new WorkerPeer(netPeerGroup, a,b,list,chaine,myNetworkManager,myInputPipe);
                
            }
            
        }
        
    }                                        

    private void Une_autre_tacheActionPerformed(java.awt.event.ActionEvent evt) throws IOException { 
         
        if(masterPeer!=null){
            
              if(System.getProperty("os.name").contains("Windows")){
            
            getPath(new File("/"),"Matrix.txt");
            
        }else{
            if(System.getProperty("os.name").contains("Linux")){
                System.out.println("hello linux!!!");
                getPath(new File("/home/"),"Matrix.txt");
            }
        }
      
            Object[] message = new Object[ 10 ];
                    message[ 0 ] = "Nombre de lignes de a :";
                    message[ 1 ] = new JTextField();
                    message[ 2 ] = "Nombre de colomnes de a";
                    message[ 3 ] = new JTextField();
                     message[ 4 ] = "Nombre de lignes de b";
                     message[ 5 ] = new JTextField();
                     message[ 6 ] = "Nombre de colomnes de b";
                     message[ 7 ] = new JTextField();
                     message[ 8 ] = "Opération";
                     message[ 9 ] = Choix;
                     
 
                    String option[] = { "OK", "Annuler" };
                    
                    int result = JOptionPane.showOptionDialog(null,message,"connexion",JOptionPane.DEFAULT_OPTION,JOptionPane.QUESTION_MESSAGE,null,option,message[1] );
                
                    if( result == 0 )
                {
                     a = new Matrix(Integer.parseInt(( (JTextField)message[ 1 ] ).getText()), Integer.parseInt(( (JTextField)message[ 3 ] ).getText()));
                     b = new Matrix(Integer.parseInt(( (JTextField)message[ 5 ] ).getText()), Integer.parseInt(( (JTextField)message[ 7 ] ).getText()));
                    
                    
                    chaine = ((JComboBox)message[ 9 ]).getSelectedItem().toString();
                    
  
                }else{
                    System.exit(0);
                }
                    
                    
           
            BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(al.get(0).toString()));
            bufferedWriter.write(chaine+";");
            bufferedWriter.newLine();
            bufferedWriter.write("Matrice a;");
            bufferedWriter.newLine();
            bufferedWriter.write(String.valueOf(a.getNbLines())+";");
            bufferedWriter.newLine();
            bufferedWriter.write(String.valueOf(a.getNbColumns())+";");
            bufferedWriter.newLine();
            
            
            int count1=4;
            while(count1<4+(a.getNbLines() * a.getNbColumns())){
                for(int i = 0; i<a.getNbLines(); i++){
                    for(int j = 0; j<a.getNbColumns(); j++){
                        random = (Math.random() * (higher-lower)) + lower;
                        bufferedWriter.write(String.valueOf(random)+";");
                        count1++;
                    }
                    bufferedWriter.newLine();
                }
            }
            
            bufferedWriter.write("Matrice b;");
            bufferedWriter.newLine();
            bufferedWriter.write(String.valueOf(b.getNbLines())+";");
            bufferedWriter.newLine();
            bufferedWriter.write(String.valueOf(b.getNbColumns())+";");
            
            bufferedWriter.newLine();
            
            int count2 = 4+a.getNbLines();
            
            int count3 = count2;
            
            while(count3<count2+(b.getNbLines() * b.getNbColumns())){
                for(int i = 0; i<b.getNbLines(); i++){
                    for(int j = 0; j<b.getNbColumns(); j++){
                        random = (Math.random() * (higher-lower)) + lower;
                        bufferedWriter.write(String.valueOf(random)+";");
                        count3++;
                    }
                    bufferedWriter.newLine();
                }
                
            }
            bufferedWriter.close();
            
           
            
            
            
         
         
         
            
        }else{
            if(workerPeer!=null){
                
                  if(System.getProperty("os.name").contains("Windows")){
            
            getPath(new File("/"),"Matrix.txt");
            
        }else{
            if(System.getProperty("os.name").contains("Linux")){
                System.out.println("hello linux!!!");
                getPath(new File("/home/"),"Matrix.txt");
            }
        }
      
                  
                  
                  Object[] message = new Object[ 10 ];
                    message[ 0 ] = "Nombre de lignes de a :";
                    message[ 1 ] = new JTextField();
                    message[ 2 ] = "Nombre de colomnes de a";
                    message[ 3 ] = new JTextField();
                     message[ 4 ] = "Nombre de lignes de b";
                     message[ 5 ] = new JTextField();
                     message[ 6 ] = "Nombre de colomnes de b";
                     message[ 7 ] = new JTextField();
                     message[ 8 ] = "Opération";
                     message[ 9 ] = Choix;
                     
 
                    String option[] = { "OK", "Annuler" };
                    
                    int result = JOptionPane.showOptionDialog(null,message,"connexion",JOptionPane.DEFAULT_OPTION,JOptionPane.QUESTION_MESSAGE,null,option,message[1] );
                
                    if( result == 0 )
                {
                     a = new Matrix(Integer.parseInt(( (JTextField)message[ 1 ] ).getText()), Integer.parseInt(( (JTextField)message[ 3 ] ).getText()));
                     b = new Matrix(Integer.parseInt(( (JTextField)message[ 5 ] ).getText()), Integer.parseInt(( (JTextField)message[ 7 ] ).getText()));
                    
                    
                    chaine = ((JComboBox)message[ 9 ]).getSelectedItem().toString();
                    
  
                }else{
                    System.exit(0);
                }
                    
                    
           
            BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(al.get(0).toString()));
            bufferedWriter.write(chaine+";");
            bufferedWriter.newLine();
            bufferedWriter.write("Matrice a;");
            bufferedWriter.newLine();
            bufferedWriter.write(String.valueOf(a.getNbLines())+";");
            bufferedWriter.newLine();
            bufferedWriter.write(String.valueOf(a.getNbColumns())+";");
            bufferedWriter.newLine();
            
            
            int count1=4;
            while(count1<4+(a.getNbLines() * a.getNbColumns())){
                for(int i = 0; i<a.getNbLines(); i++){
                    for(int j = 0; j<a.getNbColumns(); j++){
                        random = (Math.random() * (higher-lower)) + lower;
                        bufferedWriter.write(String.valueOf(random)+";");
                        count1++;
                    }
                    bufferedWriter.newLine();
                }
            }
            
            bufferedWriter.write("Matrice b;");
            bufferedWriter.newLine();
            bufferedWriter.write(String.valueOf(b.getNbLines())+";");
            bufferedWriter.newLine();
            bufferedWriter.write(String.valueOf(b.getNbColumns())+";");
            
            bufferedWriter.newLine();
            
            int count2 = 4+a.getNbLines();
            
            int count3 = count2;
            
            while(count3<count2+(b.getNbLines() * b.getNbColumns())){
                for(int i = 0; i<b.getNbLines(); i++){
                    for(int j = 0; j<b.getNbColumns(); j++){
                        random = (Math.random() * (higher-lower)) + lower;
                        bufferedWriter.write(String.valueOf(random)+";");
                        count3++;
                    }
                    bufferedWriter.newLine();
                }
                
            }
            bufferedWriter.close();
            
           
            
            
            
            }
        }
        
        
       
    }                                               

    private void QuitterActionPerformed(java.awt.event.ActionEvent evt) {                                        
        myNetworkManager.stopNetwork();
        this.setVisible(false);
        System.exit(0);
    }                                       

    private void RechercherActionPerformed(java.awt.event.ActionEvent evt) {                                           
        Decouverte decouverte = new Decouverte(netPeerGroup, chaine, a, b,myNetworkManager,this);
           decouverte.start();
           this.list=decouverte.Resultat_recherche();
           if(masterPeer!=null){
                 this.masterPeer.SetLinkedlist(this.list);
           }else{
               this.workerPeer.SetLinkedlist(this.list);
           }
         
           
    }                                          

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame().setVisible(true);
            }
        });
    }
    
    public JTextArea GetJTextArea(){
        return this.jTextArea1;
    }
    
    public JProgressBar GetJProgressBar(){
        return this.jProgressBar1;
    }
    
     public void getPath(File f,String s){
     if(f.getName().equals(s)){
          al.add(f.getPath());
     }
        
 
		File[] liste_fils = f.listFiles();
 
		if(liste_fils!=null)
		{
			for(int i=0;i<liste_fils.length;i++)
			{
				getPath(liste_fils[i],s);
			}
		}
        
    }
     
     public void set_reMatrix(Matrix x){
         this.reMatrix = x;
         
     }
     
     public void set_reMatrix1(Matrix x){
         this.reMatrix1 = x;
     }
    // Variables declaration - do not modify                     
    private javax.swing.JButton Calculer;
    private javax.swing.JButton Quitter;
    private javax.swing.JButton Rechercher;
    private javax.swing.JButton Show_matrix_a;
    private javax.swing.JButton Show_matrix_b;
    private javax.swing.JButton Show_matrix_result;
    private javax.swing.JButton Une_autre_tache;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration                   
}
